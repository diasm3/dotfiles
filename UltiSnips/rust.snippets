# 함수
snippet fn "fn"
fn ${1:name}(${2}) {
	${5}
}
endsnippet
snippet fn- "fn ->"
fn ${1:name}(${2})${3: -> ${4:i32}} {
	${5}
}
endsnippet
snippet main "main"
fn main() {
	${0}
}
endsnippet
snippet pl "println!"
println!(${1});
${2}
endsnippet
snippet pf "println!"
println!("${1} {}", ${2});
${3}
endsnippet
snippet ex "extern crate"
extern crate ${1};
endsnippet
snippet l "let"
let ${1:name} = ${2};
${3}
endsnippet
snippet lm "let"
let mut ${1:name} = ${2};
${3}
endsnippet
snippet c "const"
const ${1} = ${2};
${3}
endsnippet
# if, else, while, for
snippet if "if .. { .. }"
if ${1:bool} {
	${2}
}
endsnippet
snippet else "else { .. }"
else {
	${1}
}
endsnippet
snippet iflet "if let"
if let Some(${1}) = ${2} {
	${0}
}
endsnippet
snippet while "while { ... }"
while ${1:bool} {
	${2}
}
endsnippet
snippet for "for .. in .. { .. }"
for ${1:item} in ${2:collection} {
	${3}
}
endsnippet
snippet fori "for .. in 1..n { .. }"
for ${1:i} in ${2:1..100} {
	${3}
}
endsnippet
# 구조체
snippet struct "struct .. { .. }"
struct ${1:Name} {
	${2:key}: ${3:Type},
	${4}
}
endsnippet
snippet k "key: .. ,"
${1:key}: ${2:value},
${3}
endsnippet
snippet p "param: Type,"
${1:param}: ${2:Type}${3:,}
endsnippet
snippet impl "impl Struct { .. }"
impl ${1:struct_name} {
	fn ${2:method_name}(&self) -> u32 {
		${3}
	}
}
endsnippet
snippet method "fn method(&self) { .. }"
fn ${1:method_name} (&self) -> bool {
	${2}
}
endsnippet
# enum
snippet enum "enum"
#[derive(Debug)]
enum ${1:EnumerateName} {
	${2}
}
endsnippet
snippet enum_example "enum"
enum ${1:EnumerateName} {
	Quit,
	Move { x: i32, y: i32 },
	Write(String),
	ChangeColor(i32, i32, i32),
}
endsnippet
snippet match "match"
match ${1:target} {
	${2:pattern} => ${3:result},
}
endsnippet
# kebab-case to snake_case
snippet "([\S]+(\-[\S]+)+)" "kebab-case to snake_case" r
`!p snip.rv = re.sub('-','_', match.group(1))`$0
endsnippet
snippet mod "mod"
mod ${1:mod_name} {
	${0}
}
endsnippet
snippet mod; "mod name;"
mod ${1:mod_name};
${0}
endsnippet
snippet p "pub"
pub ${0}
endsnippet
snippet use "use"
use ${0};
endsnippet
snippet super "super"
super::${0}
endsnippet
